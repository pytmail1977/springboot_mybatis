1、修改prePrint（）函数，不再使用参数funcSeq_t funcSeq
2、修改宏定义infoPrint使用不带参数funcSeq的prePrint
	#define infoPrint prePrint(funcSeq);为#define infoPrint prePrint();
3、修改宏定义GET_FUNCSEQ，不再在函数内引入变量funcSeq_t funcSeq
4、取消函数funcSeq_t getRandFuncSeq()的定义
5、修改以下三个函数定义，取消参数funcSeq_t funcSeq
	改
		void wormhole_mutex_lock(worm_mutex_t *pWormMutex, funcSeq_t funcSeq);
		void wormhole_mutex_unlock(worm_mutex_t *pWormMutex, funcSeq_t funcSeq);
		int  wormhole_mutex_trylock(worm_mutex_t *pWormMutex, funcSeq_t funcSeq);
	为
		void wormhole_mutex_lock(worm_mutex_t *pWormMutex);
		void wormhole_mutex_unlock(worm_mutex_t *pWormMutex);
		int  wormhole_mutex_trylock(worm_mutex_t *pWormMutex);
6、修改wormhole_mutex_lock（），锁住的时候不再记录是被哪个函数锁住
7、修改wormhole_mutex_unlock（），解锁的时候不再判断是不是当前函数实例锁住了相应对象，只要线程是当前线程就可以解锁
8、修改wormhole_mutex_trylock（），锁住的时候不再记录是被哪个函数锁住
9、将所有
		worm_mutex_lock(&pMYsql->mutex,funcSeq);
		worm_mutex_unlock(&pMYsql->mutex,funcSeq);
		worm_mutex_trylock(&pMYsql->mutex,funcSeq);
	改为
		worm_mutex_lock(&pMYsql->mutex);//2018-6-3 不再使用funcSeq //worm_mutex_lock(&pMYsql->mutex,funcSeq);
		worm_mutex_unlock(&pMYsql->mutex);//2018-6-3 不再使用funcSeq //worm_mutex_unlock(&pMYsql->mutex,funcSeq);
		worm_mutex_trylock(&pMYsql->mutex);//2018-6-3 不再使用funcSeq //worm_mutex_trylock(&pMYsql->mutex,funcSeq);
